n=14
m=15 # map(int, input().split())  n,m을 공백으로 입력받기
graph = [[0,0,0,0,0,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,0,1,1,1,1,1,1,0],[1,1,0,1,1,1,0,1,1,0,1,1,1,0],[1,1,0,1,1,1,0,1,1,0,0,0,0,0],
         [1,1,0,1,1,1,1,1,1,1,1,1,1,1],[1,1,0,1,1,1,1,1,1,1,1,1,0,0],[1,1,0,0,0,0,0,0,0,1,1,1,1,1],[0,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [0,0,0,0,0,0,0,0,0,1,1,1,1,1],[0,1,1,1,1,1,1,1,1,1,1,0,0,0],[0,0,0,1,1,1,1,1,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,1,1,0,0,0],
         [1,1,1,1,1,1,1,1,1,1,0,0,1,1,],[1,1,1,0,0,0,1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,1,1,1,1,1,1,1,1]]
'''
for i in range(n):
    graph.append(list(map(int, input())))  # 2차원 리스트 입력받기
'''

def dfs(x, y):  # 연결된 노드들 방문

    if x <= -1 or x >= n or y <= -1 or y >= n:  # 범위를 벗어나는 경우에는 종료
        return False
    if graph[x][y] == 0:  # 노드를 방문하지 않았다면
        graph[x][y] = 1  # 방문처리

        dfs(x - 1, y)  # 상
        dfs(x, y - 1)  # 좌
        dfs(x + 1, y)  # 하
        dfs(x, y + 1)  # 우

        return True
    return False


result = 0
for i in range(n):  # 모든 위치에서 음료수 채우기
    for j in range(m):

        if dfs(i, j) == True:  # DFS 실행
            result += 1
print(result)


